import groovy.json.JsonOutput
import groovy.json.JsonSlurper

buildscript {
    repositories {
        jcenter()
        maven {
            name "forge"
            url "https://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id 'org.ajoberstar.grgit' version '4.0.2'
    id "com.matthewprenger.cursegradle" version '1.4.0'
    id "com.wynprice.cursemaven" version "2.1.4"
    id 'java'
    id 'idea'
    id 'maven'
    id 'maven-publish'
}

defaultTasks 'fullBuild'

idea {
    module {
        // For some reason this is necessary for IDEA 2014 workspaces to recognize assets
        inheritOutputDirs = true
        //Exclude directories from being managed
        for (String excludeDirName in ["run", "out", "logs", "gradle"]) {
            File excludeDir = new File(projectDir, excludeDirName)
            excludeDirs.add(excludeDir)
        }
    }
}

apply plugin: 'net.minecraftforge.gradle'

sourceSets {
    api {
        java {
            srcDir 'src/api/java'
        }
    }
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            include '**/**'
            // copy everything else, but blender files.
            exclude '**/*.blend'
            //Add the generated main module resources
            srcDirs += 'src/datagen/generated/mekanism'
            //But exclude the cache of the generated data from what gets built
            exclude '.cache'
        }
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
    additions { setupSourceSet(sourceSets.additions, 'additions') }
    research { setupSourceSet(sourceSets.research, 'research') }
    generators { setupSourceSet(sourceSets.generators, 'generators') }
    defense { setupSourceSet(sourceSets.defense, 'defense') }
    tools { setupSourceSet(sourceSets.tools, 'tools') }
    test {
        compileClasspath += sourceSets.api.output + sourceSets.main.output + sourceSets.additions.output + sourceSets.generators.output + sourceSets.defense.output + sourceSets.tools.output
        runtimeClasspath += sourceSets.api.output + sourceSets.main.output + sourceSets.additions.output + sourceSets.generators.output + sourceSets.defense.output + sourceSets.tools.output
    }
    //Data gen modules for the different modules
    datagenmain { setupDataGenSourceSet(sourceSets.datagenmain, null, 'main') }
    datagenadditions { setupDataGenSourceSet(sourceSets.datagenadditions, sourceSets.additions, 'additions') }
    datagenresearch { setupDataGenSourceSet(sourceSets.datagenresearch, sourceSets.research, 'research') }
    datagengenerators { setupDataGenSourceSet(sourceSets.datagengenerators, sourceSets.generators, 'generators') }
    datagendefense { setupDataGenSourceSet(sourceSets.datagendefense, sourceSets.defense, 'defense') }
    datagentools { setupDataGenSourceSet(sourceSets.datagentools, sourceSets.tools, 'tools') }
}

//This method sets up an additional sourceset in src/$name and adds a reference to the corresponding
// data gen's resource directory excluding the cache. It also adds the api and main mekanism module
// to the dependencies of the source set we are setting up
def setupSourceSet(SourceSet sourceSet, String name) {
    sourceSet.java {
        srcDir 'src/' + name + '/java'
    }
    sourceSet.resources {
        //Add the generated module resources
        srcDirs += 'src/datagen/generated/mekanism' + name
        //But exclude the cache of the generated data from what gets built
        exclude '.cache'
    }
    sourceSet.compileClasspath += sourceSets.api.output
    sourceSet.compileClasspath += sourceSets.main.output
}

//This method sets up a source set in datagen/$name and adds the api, main mekanism module and an optional
// base module to the dependencies of the data generators source set that we are setting up
def setupDataGenSourceSet(SourceSet datagenSourceSet, SourceSet baseSourceSet, String name) {
    datagenSourceSet.java.srcDirs = ['src/datagen/' + name + '/java']
    datagenSourceSet.resources.srcDirs = ['src/datagen/' + name + '/resources']
    datagenSourceSet.compileClasspath += project.sourceSets.api.output
    datagenSourceSet.compileClasspath += project.sourceSets.main.output
    if (baseSourceSet != null) {
        //Only case it is null is when we are doing datagenmain so other cases also add access to the stuff
        // in datagenmain so we can add helper classes
        datagenSourceSet.compileClasspath += project.sourceSets.datagenmain.output
        datagenSourceSet.compileClasspath += baseSourceSet.output
    }
}

configurations {
    //Make sure all our sub source set stuff extends the proper base methods so that
    // they can see all the dependencies we have in dependencies including forge
    def compileExtenders = [apiCompile, additionsCompile, researchCompile, generatorsCompile, defenseCompile, toolsCompile, testCompile,
                            datagenmainCompile, datagenadditionsCompile, datagengeneratorsCompile, datagendefenseCompile, datagenresearchCompile, datagentoolsCompile]
    def compileOnlyExtenders = [apiCompileOnly, additionsCompileOnly, researchCompileOnly, generatorsCompileOnly, defenseCompileOnly, toolsCompileOnly, testCompileOnly,
                                datagenmainCompileOnly, datagenadditionsCompileOnly, datagengeneratorsCompileOnly, datagendefenseCompileOnly, datagenresearchCompileOnly, datagentoolsCompileOnly]
    def runtimeOnlyExtenders = [apiRuntimeOnly, additionsRuntimeOnly, researchRuntimeOnly, generatorsRuntimeOnly, defenseRuntimeOnly, toolsRuntimeOnly,
                                datagenmainRuntimeOnly, datagenadditionsRuntimeOnly, datagengeneratorsRuntimeOnly, datagendefenseRuntimeOnly, datagenresearchRuntimeOnly, datagentoolsRuntimeOnly]
    for (def compileExtender : compileExtenders) {
        compileExtender.extendsFrom(compile)
    }
    for (def compileOnlyExtender : compileOnlyExtenders) {
        compileOnlyExtender.extendsFrom(compileOnly)
    }
    for (def runtimeOnlyExtender : runtimeOnlyExtenders) {
        runtimeOnlyExtender.extendsFrom(runtimeOnly)
    }
}

repositories {
    maven {
        name 'ForgeFS'
        url 'https://files.minecraftforge.net/maven'
    }
    maven {
        name 'prog'
        url 'http://dvs1.progwml6.com/files/maven'
    }
    maven {
        name 'curseforge'
        url 'https://minecraft.curseforge.com/api/maven/'
    }
    maven {
        name 'tterrag'
        url 'https://maven.tterrag.com/'
    }
    maven {
        name 'BlameJared - Crafttweaker'
        url 'https://maven.blamejared.com/'
    }
}

group = "mekanism"
version = "${minecraft_version}-${mod_version}." + (System.env.BUILD_NUMBER ?: "homebaked")
archivesBaseName = "Mekanism"
sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

minecraft {
    mappings channel: "snapshot", version: "${mappings_version}"

    accessTransformers(file('src/main/resources/META-INF/accesstransformer.cfg'),
            file('src/additions/resources/META-INF/accesstransformer.cfg'),
            file('src/tools/resources/META-INF/accesstransformer.cfg'))

    runs {
        client {
            workingDirectory project.file("run")

            //The below if statements are to add args to your gradle.properties file in user home
            // (DO NOT add them directly to the gradle.properties file for this project)
            // Setting the below properties allows use of your normal Minecraft account in the
            // dev environment including having your skin load. Each property also has a comment
            // explaining what information to set the value to/format it expects
            // One thing to note is because of the caching that goes on, after changing these
            // variables, you need to refresh the project and rerun genIntellijRuns/genEclipseRuns
            if (project.hasProperty('mc_uuid')) {
                //Your uuid without any dashes in the middle
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                //Your username/display name, this is the name that shows up in chat
                // Note: This is not your email, even if you have a Mojang account
                args '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_accessToken')) {
                //Your access token, you can find it in your '.minecraft/launcher_profiles.json' file
                args '--accessToken', project.getProperty('mc_accessToken')
            }

            mods {
                mekanism {
                    sources(sourceSets.main, sourceSets.api)
                }
                mekanismadditions {
                    source(sourceSets.additions)
                }
                mekanismresearch {
                    source(sourceSets.research)
                }
                mekanismgenerators {
                    source(sourceSets.generators)
                }
                mekanismdefense {
                    source(sourceSets.defense)
                }
                mekanismtools {
                    source(sourceSets.tools)
                }
            }
        }

        server {
            workingDirectory project.file("run")

            mods {
                mekanism {
                    sources(sourceSets.main, sourceSets.api)
                }
                mekanismadditions {
                    source(sourceSets.additions)
                }
                mekanismresearch {
                    source(sourceSets.research)
                }
                mekanismgenerators {
                    source(sourceSets.generators)
                }
                mekanismdefense {
                    source(sourceSets.defense)
                }
                mekanismtools {
                    source(sourceSets.tools)
                }
            }
        }

        data {
            workingDirectory project.file("run")
            environment 'target', 'fmluserdevdata'
            properties 'fml.earlyprogresswindow': 'false'

            args '--all', '--output', file('src/datagen/generated/'),
                    '--mod', 'mekanism',
                    '--existing', sourceSets.main.resources.srcDirs[0],
                    '--mod', 'mekanismadditions',
                    '--existing', sourceSets.additions.resources.srcDirs[0],
                    '--mod', 'mekanismresearch',
                    '--existing', sourceSets.research.resources.srcDirs[0],
                    '--mod', 'mekanismgenerators',
                    '--existing', sourceSets.generators.resources.srcDirs[0],
                    '--mod', 'mekanismdefense',
                    '--existing', sourceSets.defense.resources.srcDirs[0],
                    '--mod', 'mekanismtools',
                    '--existing', sourceSets.tools.resources.srcDirs[0]

            mods {
                mekanism {
                    sources(sourceSets.main, sourceSets.api, sourceSets.datagenmain)
                }
                mekanismadditions {
                    sources(sourceSets.additions, sourceSets.datagenadditions)
                }
                mekanismresearch {
                    sources(sourceSets.research, sourceSets.datagenresearch)
                }
                mekanismgenerators {
                    sources(sourceSets.generators, sourceSets.datagengenerators)
                }
                mekanismdefense {
                    sources(sourceSets.defense, sourceSets.datagendefense)
                }
                mekanismtools {
                    sources(sourceSets.tools, sourceSets.datagentools)
                }
            }
        }
    }
}

test {
    useJUnitPlatform()
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_version}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit_version}"
    //We use https://github.com/quicktheories/QuickTheories to allow for implementing property based testing
    testImplementation "org.quicktheories:quicktheories:${quicktheories_version}"

    compileOnly "org.jetbrains:annotations:${jb_annotations}"

    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

    runtimeOnly fg.deobf("team.chisel.ctm:CTM:MC${minecraft_version}-${ctm_version}")

    compileOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.15:${top_version}:api")
    runtimeOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.15:${top_version}")

    //Mods we have dependencies on but don't bother loading into the dev environment
    compileOnly fg.deobf("curse.maven:projecte:${projecte_api_id}")
    compileOnly fg.deobf("curse.maven:flux-networks:${flux_networks_id}")

    //Dependencies for data generators for mod compat reference
    //TODO: Ideally we would switch this to compileOnly and runtimeOnly but for some reason it does not work quite right
    datagenmainCompile fg.deobf("curse.maven:biomes-o-plenty:${biomesoplenty_id}")
    datagenmainCompile fg.deobf("curse.maven:i-like-wood:${ilikewood_id}")
}

def version_properties = ["version"       : mod_version, "mc_version": minecraft_version, "forge_version": min_forge_version,
                          "loader_version": loader_version]
def jsonPatterns = ["**/*.json", "**/*.mcmeta"]

//TODO: Figure out if there is a way to just define one replaceResources task
task replaceResources(type: Copy) {
    outputs.upToDateWhen { false }
    from(sourceSets.main.resources) {
        include "META-INF/mods.toml"
        expand version_properties
    }
    into "$buildDir/resources/main/"
}

task replaceResourcesAdditions(type: Copy) {
    outputs.upToDateWhen { false }
    from(sourceSets.additions.resources) {
        include "META-INF/mods.toml"
        expand version_properties
    }
    into "$buildDir/resources/additions/"
}

task replaceResourcesResearch(type: Copy) {
    outputs.upToDateWhen { false }
    from(sourceSets.research.resources) {
        include "META-INF/mods.toml"
        expand version_properties
    }
    into "$buildDir/resources/research/"
}

task replaceResourcesGenerators(type: Copy) {
    outputs.upToDateWhen { false }
    from(sourceSets.generators.resources) {
        include "META-INF/mods.toml"
        expand version_properties
    }
    into "$buildDir/resources/generators/"
}

task replaceResourcesDefense(type: Copy) {
    outputs.upToDateWhen { false }
    from(sourceSets.defense.resources) {
        include "META-INF/mods.toml"
        expand version_properties
    }
    into "$buildDir/resources/defense/"
}

task replaceResourcesTools(type: Copy) {
    outputs.upToDateWhen { false }
    from(sourceSets.tools.resources) {
        include "META-INF/mods.toml"
        expand version_properties
    }
    into "$buildDir/resources/tools/"
}

processResources {
    //Exclude the mods.toml file as we manually handle that and don't want it to invalidate our cache
    exclude 'META-INF/mods.toml'
    finalizedBy(replaceResources)
    //Minify json resources
    doLast {
        fileTree(dir: getOutputs().getFiles().getAsPath(), includes: jsonPatterns).each {
            File file -> file.setText(JsonOutput.toJson(new JsonSlurper().parse(file)))
        }
    }
}

processAdditionsResources {
    //Exclude the mods.toml file as we manually handle that and don't want it to invalidate our cache
    exclude 'META-INF/mods.toml'
    finalizedBy(replaceResourcesAdditions)
    //Minify json resources
    doLast {
        fileTree(dir: getOutputs().getFiles().getAsPath(), includes: jsonPatterns).each {
            File file -> file.setText(JsonOutput.toJson(new JsonSlurper().parse(file)))
        }
    }
}

processResearchResources {
    //Exclude the mods.toml file as we manually handle that and don't want it to invalidate our cache
    exclude 'META-INF/mods.toml'
    finalizedBy(replaceResourcesResearch)
    //Minify json resources
    doLast {
        fileTree(dir: getOutputs().getFiles().getAsPath(), includes: jsonPatterns).each {
            File file -> file.setText(JsonOutput.toJson(new JsonSlurper().parse(file)))
        }
    }
}

processDefenseResources {
    //Exclude the mods.toml file as we manually handle that and don't want it to invalidate our cache
    exclude 'META-INF/mods.toml'
    finalizedBy(replaceResourcesDefense)
    //Minify json resources
    doLast {
        fileTree(dir: getOutputs().getFiles().getAsPath(), includes: jsonPatterns).each {
            File file -> file.setText(JsonOutput.toJson(new JsonSlurper().parse(file)))
        }
    }
}

processGeneratorsResources {
    //Exclude the mods.toml file as we manually handle that and don't want it to invalidate our cache
    exclude 'META-INF/mods.toml'
    finalizedBy(replaceResourcesGenerators)
    //Minify json resources
    doLast {
        fileTree(dir: getOutputs().getFiles().getAsPath(), includes: jsonPatterns).each {
            File file -> file.setText(JsonOutput.toJson(new JsonSlurper().parse(file)))
        }
    }
}

processToolsResources {
    //Exclude the mods.toml file as we manually handle that and don't want it to invalidate our cache
    exclude 'META-INF/mods.toml'
    finalizedBy(replaceResourcesTools)
    //Minify json resources
    doLast {
        fileTree(dir: getOutputs().getFiles().getAsPath(), includes: jsonPatterns).each {
            File file -> file.setText(JsonOutput.toJson(new JsonSlurper().parse(file)))
        }
    }
}

jar {
    from sourceSets.api.output
    from sourceSets.main.output
}

//TODO: Sources Jars?

task apiJar(type: Jar) {
    classifier "api"
    from sourceSets.api.output
}

task additionsJar(type: Jar) {
    archiveName = "MekanismAdditions-${project.version}.jar"
    from sourceSets.additions.output
}

task researchJar(type: Jar) {
    archiveName = "Mekanismresearch-${project.version}.jar"
    from sourceSets.research.output
}

task defenseJar(type: Jar) {
    archiveName = "MekanismDefense-${project.version}.jar"
    from sourceSets.defense.output
}

task generatorsJar(type: Jar) {
    archiveName = "MekanismGenerators-${project.version}.jar"
    from sourceSets.generators.output
}

task toolsJar(type: Jar) {
    archiveName = "MekanismTools-${project.version}.jar"
    from sourceSets.tools.output
}

task allJar(type: Jar) {
    //Make sure the other tasks run first
    shouldRunAfter(apiJar, jar, additionsJar, defenseJar, generatorsJar, toolsJar,
            processResources, processAdditionsResources, processDefenseResources,
            processGeneratorsResources, processToolsResources)
    classifier "all"
    from(sourceSets.api.output) {
        exclude 'META-INF/mods.toml'
        exclude 'META-INF/accesstransformer.cfg'
    }
    from(sourceSets.main.output) {
        exclude 'META-INF/mods.toml'
        exclude 'META-INF/accesstransformer.cfg'
    }
    from(sourceSets.additions.output) {
        exclude 'META-INF/mods.toml'
        exclude 'META-INF/accesstransformer.cfg'
    }
    from(sourceSets.defense.output) {
        exclude 'META-INF/mods.toml'
        exclude 'META-INF/accesstransformer.cfg'
    }
    from(sourceSets.generators.output) {
        exclude 'META-INF/mods.toml'
        exclude 'META-INF/accesstransformer.cfg'
    }
    from(sourceSets.tools.output) {
        exclude 'META-INF/mods.toml'
        exclude 'META-INF/accesstransformer.cfg'
    }
    //Generate folders, merge the access transformers and mods.toml files
    mkdir("$buildDir/generated/META-INF")
    (new File("$buildDir/generated/META-INF/accesstransformer.cfg")).text = mergeATs(sourceSets.api, sourceSets.main,
            sourceSets.additions, sourceSets.defense, sourceSets.generators, sourceSets.tools)
    (new File("$buildDir/generated/META-INF/mods.toml")).text = mergeModsTOML(sourceSets.api, sourceSets.main,
            sourceSets.additions, sourceSets.defense, sourceSets.generators, sourceSets.tools)
    //Copy over the generated files
    from("$buildDir/generated") {
        include 'META-INF/mods.toml'
        expand version_properties
    }
    from("$buildDir/generated") {
        include 'META-INF/accesstransformer.cfg'
    }
}

static String mergeATs(SourceSet... sourceSets) {
    String text = ""
    for (SourceSet sourceSet : sourceSets) {
        sourceSet.resources.matching {
            include 'META-INF/accesstransformer.cfg'
        }.each {
            File file -> text = text.isEmpty() ? file.getText() : text + "\n" + file.getText()
        }
    }
    return text
}

static String mergeModsTOML(SourceSet... sourceSets) {
    String text = ""
    for (SourceSet sourceSet : sourceSets) {
        sourceSet.resources.matching {
            include 'META-INF/mods.toml'
        }.each {
            File file ->
                if (text.isEmpty()) {
                    //Nothing added yet, take it all
                    text = file.getText()
                } else {
                    //Otherwise add all but the first three lines (which are duplicated between the files)
                    String[] lines = file.getText().split("\n");
                    for (int i = 3; i < lines.length; i++) {
                        text = text + "\n" + lines[i]
                    }
                }
        }
    }
    return text
}

artifacts {
    archives apiJar
    archives jar
    archives additionsJar
    archives researchJar
    archives generatorsJar
    archives defenseJar
    archives toolsJar
    archives allJar
}

reobf {
    apiJar { classpath = sourceSets.api.compileClasspath }
    jar { classpath = sourceSets.main.compileClasspath }
    additionsJar { classpath = sourceSets.additions.compileClasspath }
    researchJar { classpath = sourceSets.research.compileClasspath }
    generatorsJar { classpath = sourceSets.generators.compileClasspath }
    defenseJar { classpath = sourceSets.defense.compileClasspath }
    toolsJar { classpath = sourceSets.tools.compileClasspath }
    allJar {}
}

task fullBuild(type: Delete) {
    delete jar
    dependsOn "build"
}

//Minimize/optimize all png files, requires optipng on the PATH
// Credits: BrainStone
task optimizePng {
    def pngPatterns = ["**/*.png"]

    doLast {
        def sourceSets = [sourceSets.main, sourceSets.additions, sourceSets.research, sourceSets.generators, sourceSets.defense, sourceSets.tools]
        for (def sourceSet : sourceSets) {
            for (dir in sourceSet.resources.srcDirs) {
                fileTree(dir: dir, includes: pngPatterns).each { File file ->
                    long size = file.length()
                    exec {
                        executable "optipng"
                        args "-q", "-o7", "-zm1-9", "-strip", "all", file
                    }
                    long newSize = file.length()
                    if (newSize < size) {
                        System.out.format("Reduced File size of %s from %d bytes to %d bytes (reduced by %.2f%%)\n",
                                file, size, newSize, ((double) (size - newSize)) / ((double) size) * 100.0)
                    }
                }
            }
        }
    }
}

uploadArchives {
    if (System.getenv("LOCAL_MAVEN") != null) {
        repositories {
            mavenDeployer {
                repository(url: "file://" + System.getenv("LOCAL_MAVEN"))
                pom {
                    groupId = project.group
                    version = project.version
                    if (System.getenv("MAVEN_ARTIFACT") != null) {
                        artifactId = System.getenv("MAVEN_ARTIFACT")
                    } else {
                        artifactId = "Mekanism"
                    }
                    project {
                        name = "Mekanism"
                        packaging 'jar'
                        description 'Mekanism is a Minecraft add-on featuring high-tech machinery that can be used to create powerful tools, armor, and weapons.'
                        url 'http://aidancbrady.com/mekanism/'
                        scm {
                            url 'https://github.com/mekanism/Mekanism.git'
                        }
                        issueManagement {
                            system 'github'
                            url 'https://github.com/mekanism/Mekanism/issues'
                        }
                        licenses {
                            license {
                                name = 'MIT'
                                distribution 'repo'
                            }
                        }
                    }
                }
            }
        }
    }
}

tasks.curseforge.dependsOn jar, additionsJar, generatorsJar, defenseJar, toolsJar, apiJar

if (System.getenv("CURSEFORGE_KEY") != null || project.hasProperty('curseforgeKey')) {
    println "Enabling Curseforge config"
    curseforge {
        apiKey = System.getenv("CURSEFORGE_KEY") ?: project.findProperty("curseforgeKey")

        def generatedChangelog = "Unable to generate changelog :("
        def currentCommit = System.getenv("GIT_COMMIT")
        def prevCommit = System.getenv("GIT_PREVIOUS_SUCCESSFUL_COMMIT") ?: System.getenv("GIT_PREVIOUS_COMMIT")

        if (currentCommit != null && prevCommit != null) {
            generatedChangelog = ""
            grgit.log {
                range(prevCommit, currentCommit)
            }.reverse().each { commit ->
                String message = commit.shortMessage
                if (!message.startsWith("Merge branch") && !message.startsWith("Merge pull request")) {
//Ignore PRs and Merges
                    message = message.replaceAll("#(\\d+)", { match ->//turn issues/prs into links (github currently supports prs being linked as issues)
                        return "<a href=\"https://github.com/mekanism/Mekanism/issues/${match[1]}\">${match[0]}</a>"
                    })
                    if (generatedChangelog != "") {
                        generatedChangelog += "<br>"
                    }
                    generatedChangelog += "<a href=\"https://github.com/mekanism/Mekanism/commit/${commit.id}\">${commit.getAbbreviatedId()}</a> - ${message}\n"
                }
            }
            println "Changelog generated"
        }

        def releaseNotesFile = project.file("docs/release_${mod_version}.html")
        if (releaseNotesFile.exists()) {
            //Add any version specific changelog stuff
            def releaseNotes = releaseNotesFile.getText()
            generatedChangelog = "$releaseNotes<br> $generatedChangelog"
        }

        if (curse_release_type == "alpha") {
            //Add a warning at the top about what an alpha build means
            generatedChangelog = "Warning: Mekanism is currently in alpha, and is not recommended for widespread use in modpacks. There are likely to be game breaking bugs, " +
                    "and updating from one alpha to the next may cause various mekanism blocks to disappear/void their contents. While we will try to not have this happen/keep " +
                    "it to a minimum make sure to make backups. You can read more about the alpha state of this project <a href=\"https://github.com/mekanism/Mekanism#alpha-status\">here</a>." +
                    "<br> $generatedChangelog"
        }

        //Main
        project {
            id = '268560'
            changelogType = "html"
            changelog = generatedChangelog
            // A file can also be set using: changelog = file('changelog.txt')
            releaseType = "${curse_release_type}"
            mainArtifact(jar) {
                relations {
                    optionalDependency "jei"
                    optionalDependency "ctm"
                    optionalDependency "biomes-o-plenty"
                    optionalDependency "flux-networks"
                    optionalDependency "i-like-wood"
                    optionalDependency "projecte"
                    optionalDependency "the-one-probe"
                }
            }
            addArtifact apiJar
            addGameVersion "${minecraft_version}"
        }

        //Additions
        project {
            id = '345425'
            changelogType = "html"
            changelog = generatedChangelog
            releaseType = "${curse_release_type}"
            mainArtifact(additionsJar) {
                relations {
                    requiredDependency "mekanism"
                }
            }
            addGameVersion "${minecraft_version}"
        }

        //Defense
        /*project {
            id = '376939'
            changelogType = "html"
            changelog = generatedChangelog
            releaseType = "${curse_release_type}"
            mainArtifact(defenseJar) {
                relations {
                    requiredDependency "mekanism"
                }
            }
            addGameVersion "${minecraft_version}"
        }*/

        //Generators
        project {
            id = '268566'
            changelogType = "html"
            changelog = generatedChangelog
            releaseType = "${curse_release_type}"
            mainArtifact(generatorsJar) {
                relations {
                    requiredDependency "mekanism"
                }
            }
            addGameVersion "${minecraft_version}"
        }

        //Tools
        project {
            id = '268567'
            changelogType = "html"
            changelog = generatedChangelog
            releaseType = "${curse_release_type}"
            mainArtifact(toolsJar) {
                relations {
                    requiredDependency "mekanism"
                }
            }
            addGameVersion "${minecraft_version}"
        }
    }
}